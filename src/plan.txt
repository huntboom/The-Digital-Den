Chunk: 
On click of button, update data. 
1. Start by "clearing" state with a clear button. 
2. Check the redux store and see what the starting state is such as null. 
3. Create a button to update it to null again
4. Have it rerender the page if necessary.
5. If the button works, have each button run the null state button commmand and then after, run 
   another function to update to the new data.
6. Essentially you're making a function to "reset" the data to the null configuration. 


After parsing through my code, I see in Genres.js it takes covers from open library then dispatches them to the 
redux store. 
So write a new root reducer to reset the state. 


That worked. Okay what's next. 

Time to do react router stuff. 

1. Start by looking at your App.js file
2. Alright after commenting and uncommenting parts of my code I realized they weren't really being commented out, I was
relying on the LSP and neovim to do so but it wasn't really commenting it out, it just appeared commented out, but still 
rendered. So I need to figure out the correct way to comment something out so that I can implement routing better. 

1. Separation of concerns. Separate components into their own files and then import them. This allows you to organize it into 
landing pages vs a long mess of code. 
2. Add routing. Once things are separated and then placed into individual pages for each file, you can slowly add routing where you have basic pages and add the components you want. 

Okay so basic overview:

1. Add routing and clean things up. 
    - Figure out how to properly comment stuff out. Then you can organize what parts you want to make to be on the landing page. 
Routing Done.

Time to clean up UI more. On load I want the shelves populated with books to start. 

Done now I need to get the book data to load on the first page so that when you enter the reading room it has already loaded. 


2. Change the data calling order, use gutendex first, then use openlibrary, then make calls to gutenburg. This order will ensure that gutenburg has the data.
3. Increase readability: Add pagination and the ability for users to save their place in their book. Zoom in more so the text fits the whole screen. 
okay so I need to use the camera helpers to see the X values of the starting position specifically and add 0.5 to them.
  //Okay instead of openlibrary--->project gutenburg, how about I start with project Gutenburg to ensure 
  //I the titles exist there, and then I get the covers for the books from open library. 
  //Because Project Gutenburg does not allow API request, I'll have to use gutendex
  //https://gutendex.com/books/?topic=${topic-goes-here}
  //Okay request made and works, the "next" object in the json gives the url for the next set of
  //books as this one seems to set the limit at 32 books.
  //So I'll 
  //Alright let's do this, take the title of a book acquired by the gutendex search, and then search openlibrary for that title. 
  //console.log the results.
  //okay so I did that and got the title of the book, now I need to do the following: 


Okay I need to make it so I can load in the data for the reading room initially, so the complete shelf needs to be object orientedso it will take an parameters and display them.

15:15
Plan: Look over code and document what changes I need to make to separate the functions into objects that take object parameters.
GO!


